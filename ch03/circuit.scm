(load "ch03/wire.scm")
(load "ch03/logic-elems.scm")
(load "ch03/queue.scm")
(load "ch03/agenda.scm")

;
; Globals
;
(define the-agenda (make-agenda))
(define inverter-delay 2)
(define and-gate-delay 3)
(define or-gate-delay 5)

;
;
;

(define (half-adder a b s c)
  (let ((d (make-wire)) (e (make-wire)))
	(or-gate a b d)
	(and-gate a b c)
	(inverter c e)
	(and-gate d e s)
	'ok))

(define input-1 (make-wire))
(define input-2 (make-wire))
(define sum (make-wire))
(define carry (make-wire))
(probe 'sum sum)
(probe 'carry carry)
(half-adder input-1 input-2 sum carry)
(set-signal! input-1 1)
(propagate)
(set-signal! input-2 1)
(propagate)

(define (full-adder a b c-in sum c-out)
  (let ((s (make-wire))
		(c1 (make-wire))
		(c2 (make-wire)))
	(half-adder b c-in s c1)
	(half-adder a s sum c2)
	(or-gate c1 c2 c-out)
	'ok))

(define i1 (make-wire))
(define i2 (make-wire))
(define c-in (make-wire))
(define sum (make-wire))
(define c-out (make-wire))
(probe 'c-in c-in)
(probe 'sum sum)
(probe 'c-out c-out)
(full-adder i1 i2 c-in sum c-out)
(set-signal! i1 1)
(propagate)
(set-signal! i2 1)
(propagate)


(define (probe name wire)
  (add-action! wire
			   (lambda ()
				 (newline)
				 (display name)
				 (display " ")
				 (display (current-time the-agenda))
				 (display " New-value = ")
				 (display (get-signal wire))
				 (newline))))

(in-test-group
 logic-elems-tests

 (define-test (inverter-test)
   (define in (make-wire))
   (define out (make-wire))
   (inverter in out)
   (propagate)
   (assert-equal 1 (get-signal out))
   (set-signal! in 1)
   (propagate)
   (assert-equal 0 (get-signal out)))

 (define-test (and-gate-test)
   (define in1 (make-wire))
   (define in2 (make-wire))
   (define out (make-wire))
   (and-gate in1 in2 out)
   (propagate)
   (assert-equal 0 (get-signal out))
   (set-signal! in1 1)
   (propagate)
   (assert-equal 0 (get-signal out))
   (set-signal! in2 1)
   (propagate)
   (assert-equal 1 (get-signal out))
   (set-signal! in1 0)
   (propagate)
   (assert-equal 0 (get-signal out)))

 (define-test (or-gate-test)
   (define in1 (make-wire))
   (define in2 (make-wire))
   (define out (make-wire))
   (or-gate in1 in2 out)
   (propagate)
   (assert-equal 0 (get-signal out))
   (set-signal! in1 1)
   (propagate)
   (assert-equal 1 (get-signal out))
   (set-signal! in2 1)
   (propagate)
   (assert-equal 1 (get-signal out))
   (set-signal! in1 0)
   (propagate)
   (assert-equal 1 (get-signal out))
   (set-signal! in2 0)
   (propagate)
   (assert-equal 0 (get-signal out)))
)
(run-test '(logic-elems-tests))
